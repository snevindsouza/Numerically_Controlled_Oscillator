module lcd_interface(
	input clk_1MHz,rst, 
	input [1:0] state,
	output reg [7:0] data,
	output reg lcd_e, lcd_rs, lcd_rw
);

integer i = 0;
integer j = 1;

reg flag, sflag;

initial begin lcd_rw = 0; flag = 1; sflag=0; end 
reg [7:0] Datas [1:40];

always @(posedge clkdiv) begin
	case(state)
		s0: begin
			flag = 0;
			Datas[1]   =  8'h38;		//-- control instruction : configure - 2 lines, 5x7 matrix --		 
			Datas[2]   =  8'h0C;    //-- control instruction : Display on, cursor off --		 
			Datas[3]   =  8'h06;    //-- control instruction : Increment cursor : shift cursor to right --	
			Datas[4]   =  8'h01;    //-- control instruction : clear display screen --			 
			Datas[5]   =  8'h80;    //-- control instruction : force cursor to begin at first line --			 
			Datas[6]   =  8'h20;    // T			 
			Datas[7]   =  8'h20;    // e	
			Datas[8]   =  8'h20;    // a			 
			Datas[9]   =  8'h20;    // m			 
			Datas[10]  =  8'h57;    //  			 
			Datas[11]  =  8'h61;    // n			 
			Datas[12]  =  8'h76;    // o			 
			Datas[13]  =  8'h65;    // :
			Datas[14]  =  8'h66;    //
			Datas[15]  =  8'h6f;    // 2			 
			Datas[16]  =  8'h72;    // 4			 
			Datas[17]  =  8'h6d;    // E			 
			Datas[18]  =  8'h20;    // C			 
			Datas[19]  =  8'h20;    // 3			 
			Datas[20]  =  8'h20;    // 3			 
			Datas[21]  =  8'h20;    //
			
			Datas[22]  =  8'hc0;			 
			Datas[23]  =  8'h20;    // :
			Datas[24]  =  8'h20;    //
			Datas[25]  =  8'h20;    // 2			 
			Datas[26]  =  8'h47;    // 4			 
			Datas[27]  =  8'h65;    // E			 
			Datas[28]  =  8'h6e;    // C			 
			Datas[29]  =  8'h65;    // 3			 
			Datas[30]  =  8'h72;    // 3
			Datas[31]  =  8'h61;    // 3	
			Datas[32]  =  8'h74;    // 3	
			Datas[33]  =  8'h6f;    // 3	
			Datas[34]  =  8'h72;    // 3	
			Datas[35]  =  8'h21;    // 3	
			Datas[36]  =  8'h20;    // 3	
			Datas[37]  =  8'h20;    // 3	
			Datas[38]  =  8'h20;    // 3
		end
		s1: begin 	
			sflag = 1;
			#10000;
			sflag = 0;
//			Datas[1]   =  8'h38;		//-- control instruction : configure - 2 lines, 5x7 matrix --		 
//			Datas[2]   =  8'h0C;    //-- control instruction : Display on, cursor off --		 
//			Datas[3]   =  8'h06;    //-- control instruction : Increment cursor : shift cursor to right --	
			Datas[4]   =  8'h01;    //-- control instruction : clear display screen --			 
			Datas[5]   =  8'h80;    //-- control instruction : force cursor to begin at first line --			 
			Datas[6]   =  8'h53;    // T			 
			Datas[7]   =  8'h65;    // e	
			Datas[8]   =  8'h6c;    // a			 
			Datas[9]   =  8'h65;    // m			 
			Datas[10]  =  8'h63;    //  			 
			Datas[11]  =  8'h74;    // n			 
			Datas[12]  =  8'h20;    // o			 
			Datas[13]  =  8'h53;    // :
			Datas[14]  =  8'h69;    //
			Datas[15]  =  8'h67;    // 2			 
			Datas[16]  =  8'h6e;    // 4			 
			Datas[17]  =  8'h61;    // E			 
			Datas[18]  =  8'h6c;    // C			 
			Datas[19]  =  8'h20;    // 3			 
			Datas[20]  =  8'h20;    // 3			 
			Datas[21]  =  8'h20;    //
			// SECOND LINE
			Datas[22]  =  8'hc0;		 
			Datas[23]  =  8'h20;   // :
			Datas[24]  =  8'h20;  //
			Datas[25]  =  8'h20;    // 2			 
			Datas[26]  =  8'h20;    // 4			 
			Datas[27]  =  8'h20;    // E			 
			Datas[28]  =  8'h20;    // C			 
			Datas[29]  =  8'h20;    // 3			 
			Datas[30]  =  8'h20;    // 3
			Datas[31]  =  8'h20;    // 3	
			Datas[32]  =  8'h20;    // 3	
			Datas[33]  =  8'h20;    // 3	
			Datas[34]  =  8'h20;    // 3	
			Datas[35]  =  8'h20;    // 3	
			Datas[36]  =  8'h20;    // 3	
			Datas[37]  =  8'h20;    // 3	
			Datas[38]  =  8'h20;    // 3	
		end
	endcase
end


always @(posedge clkdiv) begin
	if (flag) begin i = 0; j = 1; end
	else if (sflag) begin i = 0; j = 4; end 
	else begin
		//-- Delay for writing data
		if (i < 200) begin // Assuming 1 clock cycle is 0.1us
			i = i + 1;
			lcd_e = 1;
			data = Datas[j];
		end else if (i >= 200 & i < 400) begin // Adjust according to clock cycle
			i = i + 1;
			lcd_e = 0;
		end else if (i == 400) begin // Adjust according to clock cycle
			j = j + 1;
			i = 0;
		end
		// LCD_RS signal should be set to 0 for writing commands and to 1 for writing data
		if (j <= 5 ) lcd_rs = 0;  
		else if (j > 5 & j< 22) lcd_rs = 1;   
		else if (j == 22) lcd_rs = 0;
		else if (j > 22 & j < 39 ) lcd_rs = 1;
		else if(j ==39) j = 5;
	end
end
endmodule