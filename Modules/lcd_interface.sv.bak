module lcd_interface (
	input clk, rst, flag, sflag,
	input wire [1:0] state,
	output reg [7:0] data,
	output reg lcd_e, lcd_rs, lcd_rw
);
integer i = 0;
integer j = 1;

reg [7:0] Datas [1:40];
reg [27:0] count = 28'd0;

initial begin 
	lcd_rw = 0; 
end 

always @(posedge clk) begin
	if(state == 0) begin
		Datas[1]   =  8'h38;		//-- control instruction : configure - 2 lines, 5x7 matrix --		 
		Datas[2]   =  8'h0C;    //-- control instruction : Display on, cursor off --		 
		Datas[3]   =  8'h06;    //-- control instruction : Increment cursor : shift cursor to right --	
		Datas[4]   =  8'h01;    //-- control instruction : clear display screen --			 
		Datas[5]   =  8'h80;    //-- control instruction : force cursor to begin at first line --			 
		Datas[6]   =  8'h20;    // 		 
		Datas[7]   =  8'h20;    // 
		Datas[8]   =  8'h20;    // 			 
		Datas[9]   =  8'h20;    //			 
		Datas[10]  =  8'h57;    // W 			 
		Datas[11]  =  8'h61;    // a			 
		Datas[12]  =  8'h76;    // v			 
		Datas[13]  =  8'h65;    // e
		Datas[14]  =  8'h66;    //	f
		Datas[15]  =  8'h6f;    // o			 
		Datas[16]  =  8'h72;    // r			 
		Datas[17]  =  8'h6d;    // m			 
		Datas[18]  =  8'h20;    // 			 
		Datas[19]  =  8'h20;    // 			 
		Datas[20]  =  8'h20;    // 			 
		Datas[21]  =  8'h20;    //
		Datas[22]  =  8'hc0;		// Second line	 
		Datas[23]  =  8'h20;    // 
		Datas[24]  =  8'h20;    //
		Datas[25]  =  8'h20;    // 			 
		Datas[26]  =  8'h47;    // G			 
		Datas[27]  =  8'h65;    // e			 
		Datas[28]  =  8'h6e;    // n			 
		Datas[29]  =  8'h65;    // e			 
		Datas[30]  =  8'h72;    // r
		Datas[31]  =  8'h61;    // a	
		Datas[32]  =  8'h74;    // t	
		Datas[33]  =  8'h6f;    // o	
		Datas[34]  =  8'h72;    // r	
		Datas[35]  =  8'h21;    // !	
		Datas[36]  =  8'h20;    // 	
		Datas[37]  =  8'h20;    // 	
		Datas[38]  =  8'h20;    // 	
	end else if (state == 1) begin
//		Datas[1]   =  8'h38;		//-- control instruction : configure - 2 lines, 5x7 matrix --		 
//		Datas[2]   =  8'h0C;    //-- control instruction : Display on, cursor off --		 
//		Datas[3]   =  8'h06;    //-- control instruction : Increment cursor : shift cursor to right --	
		Datas[4]   =  8'h01;    //-- control instruction : clear display screen --		
		Datas[5]   =  8'h80;    //-- control instruction : force cursor to begin at first line --			 
		Datas[6]   =  8'h53;    // S			 
		Datas[7]   =  8'h65;    // e	
		Datas[8]   =  8'h6c;    // l			 
		Datas[9]   =  8'h65;    // e			 
		Datas[10]  =  8'h63;    // c			 
		Datas[11]  =  8'h74;    // t		 
		Datas[12]  =  8'h20;    // 			 
		Datas[13]  =  8'h53;    // S
		Datas[14]  =  8'h69;    // i
		Datas[15]  =  8'h67;    // g			 
		Datas[16]  =  8'h6e;    // n			 
		Datas[17]  =  8'h61;    // a			 
		Datas[18]  =  8'h6c;    // l			 
		Datas[19]  =  8'h20;    // 			 
		Datas[20]  =  8'h20;    // 			 
		Datas[21]  =  8'h20;    //
		// SECOND LINE
		Datas[22]  =  8'hc0;		 
		Datas[23]  =  8'h20;   	// 
		Datas[24]  =  8'h20;  	//
		Datas[25]  =  8'h20;    // 			 
		Datas[26]  =  8'h20;    // 			 
		Datas[27]  =  8'h20;    // 			 
		Datas[28]  =  8'h20;    // 			 
		Datas[29]  =  8'h20;    // 			 
		Datas[30]  =  8'h20;    // 
		Datas[31]  =  8'h20;    // 	
		Datas[32]  =  8'h20;    // 	
		Datas[33]  =  8'h20;    // 	
		Datas[34]  =  8'h20;    // 	
		Datas[35]  =  8'h20;    // 	
		Datas[36]  =  8'h20;    // 	
		Datas[37]  =  8'h20;    // 	
		Datas[38]  =  8'h20;    // 
	end
end

always @(posedge clk) begin
	if (flag) begin i = 0; j = 1; end
	else if (sflag) begin i = 0; j = 4; end 
	else begin
		//-- Delay for writing data
		if (i < 200) begin // Assuming 1 clock cycle is 0.1us
			i = i + 1;
			lcd_e = 1;
			data = Datas[j];
		end else if (i >= 200 & i < 400) begin // Adjust according to clock cycle
			i = i + 1;
			lcd_e = 0;
		end else if (i == 400) begin // Adjust according to clock cycle
			j = j + 1;
			i = 0;
		end
		// LCD_RS signal should be set to 0 for writing commands and to 1 for writing data
		if (j <= 5 ) lcd_rs = 0;  
		else if (j > 5 & j< 22) lcd_rs = 1;   
		else if (j == 22) lcd_rs = 0;
		else if (j > 22 & j < 39 ) lcd_rs = 1;
		else if(j ==39) j = 5;
	end
end
endmodule 