//typedef enum {
//	S0,
//	S1,
//	S2
//} State;

module StateMachine (
	input clk_50MHz, rst,
	output wire [7:0] data,
	output wire lcd_e, lcd_rs, lcd_rw
);

reg state, stateNext;
reg flag, sflag;

parameter S0=2'b00;
parameter S1=2'b01;
parameter S2=2'b10;
parameter S3=2'b11;

reg clk_1MHz;
reg [27:0] divider = 28'd0;
integer count = 0;
initial begin sflag = 0; flag =1; end

//instantiate lcd module
lcd_interface lcd_inst(
	.clk(clk_1MHz),
	.state(state),
	.flag(flag),
	.sflag(sflag),
	.rst(rst),
	.data(data),
	.lcd_e(lcd_e),
	.lcd_rs(lcd_rs),
	.lcd_rw(lcd_rw)
);

always @(posedge clk_50MHz) begin
	divider<=divider + 28'd1; 
	if(divider>=50) divider <= 28'd0;
	clk_1MHz <= (divider<divider/2)? 1'b1:1'b0;
end

always_ff @(posedge clk_1MHz) begin
	if (rst) begin state = S0; stateNext = S0; end
	else state = stateNext;
	case (state)
		S0: begin
			flag = 0;
			count ++;
			if (count > 5000000) begin count = 0; stateNext = S1; end 
			else begin stateNext = S0; end
		end
		S1: begin
			sflag = 1;
			#1000 sflag =0;
			stateNext = S1;
		end

	endcase
end

endmodule 